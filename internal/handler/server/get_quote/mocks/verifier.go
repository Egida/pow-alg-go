// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	hashcash "github.com/ivasilkov/pow-alg-go/internal/pow/hashcash"
	mock "github.com/stretchr/testify/mock"
)

// Verifier is an autogenerated mock type for the verifier type
type Verifier struct {
	mock.Mock
}

type Verifier_Expecter struct {
	mock *mock.Mock
}

func (_m *Verifier) EXPECT() *Verifier_Expecter {
	return &Verifier_Expecter{mock: &_m.Mock}
}

// Verify provides a mock function with given fields: h
func (_m *Verifier) Verify(h hashcash.Header) error {
	ret := _m.Called(h)

	var r0 error
	if rf, ok := ret.Get(0).(func(hashcash.Header) error); ok {
		r0 = rf(h)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Verifier_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type Verifier_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - h hashcash.Header
func (_e *Verifier_Expecter) Verify(h interface{}) *Verifier_Verify_Call {
	return &Verifier_Verify_Call{Call: _e.mock.On("Verify", h)}
}

func (_c *Verifier_Verify_Call) Run(run func(h hashcash.Header)) *Verifier_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(hashcash.Header))
	})
	return _c
}

func (_c *Verifier_Verify_Call) Return(_a0 error) *Verifier_Verify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Verifier_Verify_Call) RunAndReturn(run func(hashcash.Header) error) *Verifier_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewVerifier creates a new instance of Verifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVerifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *Verifier {
	mock := &Verifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
